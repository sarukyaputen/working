# 0527  
@staticmethod或@classmethod

一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。

而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。

这有利于组织代码，把某些应该属于某个类的函数给放到那个类里去，同时有利于命名空间的整洁。



既然@staticmethod和@classmethod都可以直接类名.方法名()来调用，那他们有什么区别呢

从它们的使用上来看,
@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。
@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。
如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。

而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。

https://blog.csdn.net/handsomekang/article/details/9615239


#0529
json 完成
https://github.com/sarukyaputen/Python-/commit/196b86f6f495b80243dc430b2db91d2d2622f632d


  M: model 控制資料庫相關  (data)
  V：templates  (html)  （前端)
  C: controller (視圖) request, response  利用 controller 把  view 帶到 Model
 
#-----------------------
(** kwargs) ={}
(* args)    =()
#-----------------------
  first_curly_index = result2.index('{')
  last_curly_index = result2[::-1].index('}')

#------------------------
定义了一个方法，从list1中取值，并做为value赋值到字典a中，并生成一个新的list：
def test():
    list1 = ['192.168.1.1', '192.168.1.2', '192.168.1.3', '192.168.1.4']
    a = {}
    list2 = []
    while len(list2) < len(list1):
        for num in list1:
            a = {'IPaddr': num}
            list2.append(a)
    return list2
ans :{'server': [{'hostname': '192.168.1.1'}, {'hostname': '192.168.1.2'}, {'hostname': '192.168.1.3'}, {'hostname': '192.168.1.4'}]}
#--------------------- 

5/30   資料寫入 自動 dict
 baseball_json = list()
        baseball_dict = dict()
        for baseball in baseballs:
            new_dict = dict()
            key = 'match_id_' + baseball['match_id']
            value = baseball
            new_dict[key] = value
            baseball_dict.update(new_dict)
        print(baseball_dict)

#------------------------------------------------------
資料庫 查詢
        GameBucket.query.all()
        GameBucket.query.filter_by(id=1).first()
        GameBucket.query.filter(id == 1).first()
        GameBucket.query.get(1)
        db.session.query(GameBucket).filter(GameBucket.id).first()

#------------------------------------------------------

spyder_rs.set('abc', 1)
        # spyder_rs.set('abcd', 2)
        # print(spyder_rs.get('abcdddd'))
        # spyder_rs.set('abcd', 1000)
        # spyder_rs.set('abcde', 2000)
